#!/usr/bin/env node

/**
 * Module dependencies.
 */

var server = require('../src/server')
var debug = require('debug')('server:server')
var http = require('http')
var https = require('https')
var fs = require('fs')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
server.set('port', port)
server.set('secPort', port + 443)

/**
 * Create HTTP server.
 */

var serverHttp = http.createServer(server, () => {
  console.log(' server listning on port ', port)
})

/**
 * Listen on provided port, on all network interfaces.
 */

serverHttp.listen(port)
serverHttp.on('error', onError)
serverHttp.on('listening', onListening)

var options = {
  key: fs.readFileSync(__dirname + '/private.key'),
  cert: fs.readFileSync(__dirname + '/certificate.pem'),
}
var secureServer = https.createServer(options, server)
secureServer.listen(server.get('secPort'), () => {
  console.log('secure server listning on port ', server.get('secPort'))
})
secureServer.on('error', onError)
secureServer.on('listening', onListening)
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = serverHttp.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
